#Euler 12
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
def generate_triangle_numbers(n)
  g = []
  for i in 0..n
    t = 0
    for j in 0..i
      t = t+j
    end
    g << t
  end
  return g
end
#To speed up: if the number is odd, only check odd numbers
def list_factors(n)
  m = 0
  #even
  if (n % 2 == 0)
    for i in 1..n
      if (n%i == 0)
        m+=1
      end
    end
  #odd
  else
    for i in (1..n).step(2) do
      if (n%i == 0)
        m+=1
      end
    end
  end 
  return m
end
#Gets too slow for big numbers
def generate_next_triangle_number(n)
  t=0
  for i in 0..n
    t = t+i
  end
  return t
end
#i: index of triangle number 
#n: value of the last triangle number

def gen(i, n, stopval)
  m = n + i + 1
  if (factor2(m) < stopval)
    gen(i+1, m, stopval)
  else
    print("i: ",i," m: ",m," stop: ",stopval)
  end
  
end

def factor2(n)
  num_factors = 1
  for i in (2..Math.sqrt(n))
    power = 0
    while (n%i == 0)
      n = n/i
      power+=1
    end
    num_factors = num_factors * (power+1)
  end
  if (n > 1)
    num_factors = num_factors * 2
  end
  return num_factors
end
#print(factor2(28))
    
i = 0
n = 0
m = 1
stop = 501
start = Time.now
while (factor2(m) < stop)
  m = n + i + 1
  n = m
  i += 1
  #print("i: ",i, "n: ", n, " m: ",m," stop: ",stop,"\n")
end
print("i: ",i, "n: ", n, " m: ",m," stop: ",stop,"\n")
#start = Time.now
#list_factors(5454501)
#factor2(5454501)
finish = Time.now
print (finish-start)





